name: Test Docker, Commit, Retest, and Deploy to EC2

on:
  push:
    branches:
      - master  # Trigger when changes are pushed to the master branch.

permissions:
  contents: write  # Allow GitHub Actions to push commits.

jobs:
  # Test the Docker image
  test_docker_image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t my-docker-image:latest .

      - name: Test Docker Login
        run: |
          docker run --rm my-docker-image:latest bash -c "echo Login successful for testing purposes"

  # Commit to the main branch
  commit_to_main:
    runs-on: ubuntu-latest
    needs: test_docker_image
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"

      - name: Commit Changes
        run: |
          git add .
          git commit -m "Docker image test passed. Committing to main."
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Retest process on the main branch
  retest_docker:
    runs-on: ubuntu-latest
    needs: commit_to_main
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Log in to DockerHub again
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Retest Docker image for deployment
        run: |
          docker pull my-docker-image:latest
          docker run --rm my-docker-image:latest bash -c "echo Retest successful"

  # Deploy to EC2
  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: retest_docker
    steps:
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Copy application to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r ./my-docker-image.tar ubuntu@your-ec2-instance-ip:/home/ubuntu/

      - name: SSH into EC2 to deploy
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@your-ec2-instance-ip << 'EOF'
            docker load -i my-docker-image.tar
            docker run -d -p 80:80 my-docker-image:latest
          EOF
